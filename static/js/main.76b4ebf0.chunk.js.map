{"version":3,"sources":["theme.js","Profile.js","App.js","serviceWorker.js","index.js"],"names":["fonts","body","heading","fontSizes","fontWeights","lineHeights","colors","text","muted","background","foreground","primary","secondary","black","cards","list","borderRadius","backgroundColor","padding","bg","space","breakpoints","Profile","props","useState","activeCategory","setActiveCategory","map","subject","included","variant","sx","theme","color","alignContent","wordWrap","seocndary","onClick","href","gap","columns","className","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRACe,GACbA,MAAO,CACLC,KAAM,oDACNC,QAAS,qEAEXC,UAAW,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAClCC,YAAa,CACbH,KAAM,IACNC,QAAS,KAEXG,YAAa,CACXJ,KAAM,IACNC,QAAS,OAEXI,OAAQ,CACNC,KAAM,UACNC,MAAO,UACPC,WAAY,UACZC,WAAY,UACZC,QAAS,UACTC,UAAW,UACXC,MAAO,WAETC,MAAO,CACLC,KAAM,CACJC,aAAc,EACdC,gBAAiB,UACjBC,QAAS,EACT,UAAW,CACTC,GAAI,eAIVC,MAAO,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,IACzBC,YAAa,CAAC,OAAQ,OAAQ,S,8BCyCjBC,MAtEf,SAAiBC,GACf,IADsB,EAEsBC,mBAAS,YAF/B,mBAEfC,EAFe,KAECC,EAFD,KAGhBZ,EAFW,CAAC,CAAC,OAAQ,QAAS,CAAC,aAAc,cAAe,CAAC,YAAa,aAAc,CAAC,WAAY,YAAa,CAAC,UAAW,YAGvHa,KAAI,SAACC,GACV,IAAMC,EAAWJ,IAAmBG,EAAQ,GAC5C,OACI,kBAAC,IAAD,CACIE,QAAQ,OACRC,GAAI,CACJd,gBAAiBY,EAAWG,EAAM1B,OAAOK,QAAUqB,EAAM1B,OAAOG,WAChEwB,MAAOJ,EAAWG,EAAM1B,OAAOG,WAAauB,EAAM1B,OAAOO,MACzDqB,aAAc,QACdC,SAAU,aACV,UAAW,CACPhB,GAAIU,EAAWG,EAAM1B,OAAOK,QAAUqB,EAAM1B,OAAO8B,YAGvDC,QAAS,WACLX,EAAkBE,EAAQ,MAG9B,6BACE,uBAAGU,KAAM,IAAMV,EAAQ,IAAKA,EAAQ,SAKtD,OACE,6BACE,kBAAC,IAAD,CAAMW,IAAK,EAAGC,QAAS,CAAC,EAAG,UAAW,YAClC,yBAAKC,UAAU,mBACb,6BACA,yBAAKA,UAAU,aACZ3B,IAGL,6BACE,6BACA,6BACA,yBAAK4B,GAAG,QAAR,OAEE,kBAAC,IAAD,CAAMH,IAAK,EAAGC,QAAS,CAAC,EAAG,UAAW,YACpC,yCAGA,iDAKJ,yBAAKE,GAAG,cAAR,cAGA,yBAAKA,GAAG,aAAR,aAGA,yBAAKA,GAAG,YAAR,YAGA,yBAAKA,GAAG,WAAR,eCpDGC,MARf,WACE,OACE,kBAAC,IAAD,CAAeX,MAAOA,GACpB,kBAAC,EAAD,QCGcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.76b4ebf0.chunk.js","sourcesContent":["// example theme.js\nexport default {\n  fonts: {\n    body: 'Georgia, Cambria, \"Times New Roman\", Times, serif',\n    heading: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\n  },\n  fontSizes: [12, 14, 16, 20, 24, 32, 48],\n    fontWeights: {\n    body: 400,\n    heading: 700,\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.125,\n  },\n  colors: {\n    text: '#392a25',\n    muted: '#aaaaaa',\n    background: '#f8f8f8',\n    foreground: '#ffffff',\n    primary: '#A51C30',\n    secondary: '#FFF3F3',\n    black: '#000000',\n  },\n  cards: {\n    list: {\n      borderRadius: 2,\n      backgroundColor: \"primary\",\n      padding: 3,\n      \"&:hover\": {\n        bg: \"secondary\",\n      },\n    },\n  },\n  space: [0, 4, 8, 16, 32, 48],\n  breakpoints: ['40em', '64em', '80em'],\n};","import React from 'react';\nimport { Card, Grid} from \"theme-ui\";\nimport { useState } from \"react\";\nimport theme from './theme';\nimport './Profile.css';\n\nfunction Profile(props) {\n  const subjects = [[\"Home\", \"home\"], [\"Experience\", \"experience\"], [\"On Campus\", \"on-campus\"], [\"Projects\", \"projects\"], [\"Contact\", \"contact\"]];\n  const [activeCategory, setActiveCategory] = useState(\"Projects\");\n  const cards = \n      subjects.map((subject) => {\n          const included = activeCategory === subject[0];\n          return (\n              <Card\n                  variant=\"list\"\n                  sx={{\n                  backgroundColor: included ? theme.colors.primary : theme.colors.background,\n                  color: included ? theme.colors.background : theme.colors.black ,\n                  alignContent: 'right',\n                  wordWrap: \"break-word\",\n                  \"&:hover\": {\n                      bg: included ? theme.colors.primary : theme.colors.seocndary,\n                  },\n                  }}\n                  onClick={() => {\n                      setActiveCategory(subject[0]);\n                  }}\n                  >\n                  <div>\n                    <a href={\"#\" + subject[1]}>{subject[0]}</a>\n                  </div>\n              </Card>\n          );\n      });\n  return(\n    <div>\n      <Grid gap={5} columns={[1, \"2fr 4fr\", \"1fr 4fr\"]}>\n          <div className=\"content-desktop\">\n            <br></br>\n            <div className=\"nav-items\">\n              {cards}\n            </div>\n          </div>\n          <div>\n            <br></br>\n            <br></br>\n            <div id=\"home\">\n              Home\n              <Grid gap={4} columns={[1, \"2fr 3fr\", \"3fr 7fr\"]}>\n                <div>\n                  hi image\n                </div>\n                <div>\n                  hi description\n                </div>\n              </Grid>\n            </div>\n            <div id=\"experience\">\n              Experience\n            </div>\n            <div id=\"on-campus\">\n              On Campus\n            </div>\n            <div id=\"projects\">\n              Projects\n            </div>\n            <div id=\"contact\">\n              Contact\n            </div>\n          </div>\n\n      </Grid>\n    </div>\n  );\n}\n\nexport default Profile;","import React from 'react';\nimport { ThemeProvider } from 'theme-ui';\nimport theme from './theme';\nimport './App.css';\nimport Profile from './Profile';\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Profile/>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}